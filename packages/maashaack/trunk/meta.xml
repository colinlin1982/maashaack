<?xml version="1.0" encoding="UTF-8"?>

<project name="maashaack" default="main" basedir="."
    xmlns:if="ant:if"
    xmlns:unless="ant:unless" >
    
    <target name="clean">
        <delete dir="${basedir}/${release.dir}" />
        <delete dir="${basedir}/${deploy.dir}" />
        <delete dir="${basedir}/${docs.dir}" />
    </target>
    
    <target name="before">
        <mkdir dir="${basedir}/${release.dir}" />
        <mkdir dir="${basedir}/${deploy.dir}" />
        <mkdir dir="${basedir}/${asdoc.output}" />

        <!-- debug -->
        <echo message="properties:" level="verbose" />
        <echo message="            FLEX_HOME = ${FLEX_HOME}" level="verbose" />
        <echo message="                TODAY = ${TODAY}" level="verbose" />
        <echo message=" flash player version = ${local.flashplayerversion}" level="verbose" />
        <echo message="          swf version = ${local.swfversion}" level="verbose" />
        <echo message="               no zip = ${build.nozip}" level="verbose" />
        <echo message="     no documentation = ${build.nodoc}" level="verbose" />
        <echo message="               no abc = ${build.noabc}" level="verbose" />
        <echo message="              fat swc = ${build.fatswc}" level="verbose" />
        <echo message="" level="verbose" />

        <echo message="versions:" level="verbose" />
        <echo message="  major = ${version.major}" level="verbose" />
        <echo message="  minor = ${version.minor}" level="verbose" />
        <echo message="  build = ${version.build}" level="verbose" />
        <echo message=" number = ${project.version}" level="verbose" />
        <echo message="" level="verbose" />

        <echo if:true="${build.nozip}" message="no zip is TRUE" level="verbose" />
        <echo unless:true="${build.nozip}" message="no zip is FALSE" level="verbose" />
        <echo if:true="${build.nodoc}" message="no doc is TRUE" level="verbose" />
        <echo unless:true="${build.nodoc}" message="no doc is FALSE" level="verbose" />
        <echo if:true="${build.noabc}" message="no abc is TRUE" level="verbose" />
        <echo unless:true="${build.noabc}" message="no abc is FALSE" level="verbose" />
        <echo if:true="${build.fatswc}" message="fat swc is TRUE" level="verbose" />
        <echo unless:true="${build.fatswc}" message="fat swc is FALSE" level="verbose" />

    </target>
    
    <target name="main" depends="clean,before,build-abc,build-swc,build-swc-SA,build-doc,build-doc-SA,build-zip,after"/>
    
    <target name="build-abc">
        
        <sequential unless:true="${build.noabc}">
            <!-- DO NOT USE - Will change with RedTamarin SDK -->
            <echo message="no ABC to build" />
        </sequential>
        
    </target>

    <target name="build-swc">

        <compc
            output="${basedir}/${release.dir}/${project.swc}"
            target-player="${local.flashplayerversion}"
            swf-version="${local.swfversion}"
        >
            <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>
            <load-config filename="${basedir}/build/config.xml" append="true" />
            <namespace uri="${project.namespace}" manifest="${basedir}/${project.manifest}" />
            <include-namespaces uri="${project.namespace}" />
            <strict>true</strict>
            <optimize>true</optimize>
            <warnings>true</warnings>
            <verbose-stacktraces>false</verbose-stacktraces>
            <compute-digest>false</compute-digest>
            <!-- we want to MERGE all maashaack packages -->
            <include-libraries dir="${basedir}/${project.lib-swc}/" append="true">
                <include name="core.swc"/>
                <include name="common.swc"/>
                <include name="system.swc"/>
                <include name="system.broadcasters.swc"/>
                <include name="system.cli.swc"/>
                <include name="system.comparators.swc"/>
                <include name="system.data.swc"/>
                <include name="system.date.swc"/>
                <include name="system.diagnostics.swc"/>
                <include name="system.errors.swc"/>
                <include name="system.evaluators.swc"/>
                <include name="system.events.swc"/>
                <include name="system.formatters.swc"/>
                <include name="system.hosts.swc"/>
                <include name="system.ioc.swc"/>
                <include name="system.logging.swc"/>
                <include name="system.logic.swc"/>
                <include name="system.models.swc"/>
                <include name="system.network.swc"/>
                <include name="system.numeric.swc"/>
                <include name="system.process.swc"/>
                <include name="system.reflection.swc"/>
                <include name="system.remoting.swc"/>
                <include name="system.rules.swc"/>
                <include name="system.signals.swc"/>
                <include name="system.terminals.swc"/>
                <include name="system.text.swc"/>
                <include name="graphics.swc"/>

                <include name="logd.swc"/><!-- SPECIAL CASE -->
                <include name="eden.swc"/><!-- SPECIAL CASE -->
            </include-libraries>
            <external-library-path dir="${basedir}/${project.lib-swc}/" append="true">
                <include name="astuce.swc"/>
            </external-library-path>
            <source-path path-element="${basedir}/${project.src}" />
            <include-sources dir="${basedir}/${project.src}" includes="**/*.as" />
            <metadata date="${TODAY}" title="${project.name}">
                <publisher name="${project.publisher}" />
                <creator name="${project.creator1}" />
                <creator name="${project.creator2}" />
            </metadata>
        </compc>

    </target>

    <target name="build-swc-SA">

        <compc
            output="${basedir}/${release.dir}/${project.swc-SA}"
            target-player="${local.flashplayerversion}"
            swf-version="${local.swfversion}"
        >
            <load-config filename="${FLEX_HOME}/frameworks/air-config.xml"/>
            <load-config filename="${basedir}/build/config.xml" append="true" />
            <namespace uri="${project.namespace}" manifest="${basedir}/${project.manifest}" />
            <include-namespaces uri="${project.namespace}" />
            <strict>true</strict>
            <optimize>true</optimize>
            <warnings>true</warnings>
            <verbose-stacktraces>false</verbose-stacktraces>
            <compute-digest>false</compute-digest>
            <!-- we want to MERGE all maashaack packages -->
            <include-libraries dir="${basedir}/${project.lib-swc}/" append="true">
                <include name="core.swc"/>
                <include name="common.swc"/>
                <include name="system.swc"/>
                <include name="system.broadcasters.swc"/>
                <include name="system.cli.swc"/>
                <include name="system.comparators.swc"/>
                <include name="system.data.swc"/>
                <include name="system.date.swc"/>
                <include name="system.diagnostics.swc"/>
                <include name="system.errors.swc"/>
                <include name="system.evaluators.swc"/>
                <include name="system.events.swc"/>
                <include name="system.formatters.swc"/>
                <include name="system.hosts.swc"/>
                <include name="system.ioc.swc"/>
                <include name="system.logging.swc"/>
                <include name="system.logic.swc"/>
                <include name="system.models.swc"/>
                <include name="system.network.swc"/>
                <include name="system.numeric.swc"/>
                <include name="system.process.swc"/>
                <include name="system.reflection.swc"/>
                <include name="system.remoting.swc"/>
                <include name="system.rules.swc"/>
                <include name="system.signals.swc"/>
                <include name="system.terminals.swc"/>
                <include name="system.text.swc"/>
                <include name="graphics.swc"/>
            </include-libraries>
            <!-- we want to MERGE all maashaack libraries -->
            <include-libraries dir="${basedir}/${project.lib-swc}/" append="true">
                <include name="logd.swc"/>
                <include name="eden.swc"/>
                <include name="astuce.swc"/>
                <include name="ax.swc"/>
                <include name="fx.swc"/>
                <include name="molecule.swc"/>
            </include-libraries>
            <source-path path-element="${basedir}/${project.src}" />
            <include-sources dir="${basedir}/${project.src}" includes="**/*.as" />
            <metadata date="${TODAY}" title="${project.name}">
                <publisher name="${project.publisher}" />
                <creator name="${project.creator1}" />
                <creator name="${project.creator2}" />
            </metadata>
        </compc>

    </target>
    
    <target name="build-doc">

        <sequential unless:true="${build.nodoc}">

            <delete dir="${basedir}/${docs.dir}" />
            <mkdir dir="${basedir}/${asdoc.output}" />

            <!--         templates-path="${basedir}/${asdoc.template}" -->
            <asdoc
            output="${basedir}/${asdoc.output}"
            target-player="${local.flashplayerversion}"
            swf-version="${local.swfversion}"
            failonerror="true"
            keep-xml="true"
            skip-xsl="false"
            exclude-dependencies="false"
            >
                <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>
                <load-config filename="${basedir}/build/config-doc.xml" append="true" />
                <verbose-stacktraces>true</verbose-stacktraces>
                <doc-sources path-element="${basedir}/${project.src}" />
                <source-path path-element="${basedir}/${project.src}" />
                
                <!-- we want to MERGE all maashaack packages -->
                <doc-sources path-element="../core/src/core" />
                <doc-sources path-element="../system/src/system" />
                <doc-sources path-element="../system_broadcasters/src/system/broadcasters" />
                <doc-sources path-element="../system_cli/src/system/cli" />
                <doc-sources path-element="../system_comparators/src/system/comparators" />
                <doc-sources path-element="../system_data/src/system/data" />
                <doc-sources path-element="../system_date/src/system/date" />
                <doc-sources path-element="../system_diagnostics/src/system/diagnostics" />
                <doc-sources path-element="../system_errors/src/system/errors" />
                <doc-sources path-element="../system_evaluators/src/system/evaluators" />
                <doc-sources path-element="../system_events/src/system/events" />
                <doc-sources path-element="../system_formatters/src/system/formatters" />
                <doc-sources path-element="../system_hosts/src/system/hosts" />
                <doc-sources path-element="../system_ioc/src/system/ioc" />
                <doc-sources path-element="../system_logging/src/system/logging" />
                <doc-sources path-element="../system_logic/src/system/logic" />
                <doc-sources path-element="../system_models/src/system/models" />
                <doc-sources path-element="../system_network/src/system/network" />
                <doc-sources path-element="../system_numeric/src/system/numeric" />
                <doc-sources path-element="../system_process/src/system/process" />
                <doc-sources path-element="../system_reflection/src/system/reflection" />
                <doc-sources path-element="../system_remoting/src/system/remoting" />
                <doc-sources path-element="../system_rules/src/system/rules" />
                <doc-sources path-element="../system_signals/src/system/signals" />
                <doc-sources path-element="../system_terminals/src/system/terminals" />
                <doc-sources path-element="../system_text/src/system/text" />
                <doc-sources path-element="../graphics/src/graphics" />

                <!-- SPECIAL CASE -->
                <doc-sources path-element="../../libraries/logd/src/core/_logger.as" />
                <doc-sources path-element="../../libraries/logd/src/core/assert.as" />
                <doc-sources path-element="../../libraries/logd/src/core/log.as" />
                <doc-sources path-element="../../libraries/logd/src/core/Logger.as" />

                <!-- SPECIAL CASE -->
                <doc-sources path-element="../../libraries/eden/src/library/eden" />
                <!-- <doc-sources path-element="../../libraries/ax/src/air" /> -->
                <!-- <doc-sources path-element="../../libraries/fx/src/flash" /> -->
                
            </asdoc>

            <sequential if:true="${build.fatswc}">
                
                <!-- update swc with asdoc xml -->
                <zip destfile="${basedir}/${release.dir}/${project.swc}" update="true">
                    <zipfileset dir="${basedir}/${asdoc.output}/tempdita" prefix="docs">
                        <include name="*.xml" />
                        <include name="*.dita" />
                        <exclude name="ASDoc_Config.xml" />
                        <exclude name="overviews.xml" />
                    </zipfileset>
                </zip>

            </sequential>

            <!-- <delete dir="${basedir}/${asdoc.output}/tempdita" /> -->

        </sequential>

    </target>

    <target name="build-doc-SA">

        <sequential unless:true="${build.nodoc}">

            <delete dir="${basedir}/${docs.dir}" />
            <mkdir dir="${basedir}/${asdoc.output}" />

            <!--         templates-path="${basedir}/${asdoc.template}" -->
            <asdoc
            output="${basedir}/${asdoc.output}"
            target-player="${local.flashplayerversion}"
            swf-version="${local.swfversion}"
            failonerror="true"
            keep-xml="true"
            skip-xsl="false"
            exclude-dependencies="false"
            >
                <load-config filename="${FLEX_HOME}/frameworks/air-config.xml"/>
                <load-config filename="${basedir}/build/config-doc.xml" append="true" />
                <verbose-stacktraces>true</verbose-stacktraces>
                <doc-sources path-element="${basedir}/${project.src}" />
                <source-path path-element="${basedir}/${project.src}" />
                
                <!-- we want to MERGE all maashaack packages -->
                <doc-sources path-element="../core/src/core" />
                <doc-sources path-element="../system/src/system" />
                <doc-sources path-element="../system_broadcasters/src/system/broadcasters" />
                <doc-sources path-element="../system_cli/src/system/cli" />
                <doc-sources path-element="../system_comparators/src/system/comparators" />
                <doc-sources path-element="../system_data/src/system/data" />
                <doc-sources path-element="../system_date/src/system/date" />
                <doc-sources path-element="../system_diagnostics/src/system/diagnostics" />
                <doc-sources path-element="../system_errors/src/system/errors" />
                <doc-sources path-element="../system_evaluators/src/system/evaluators" />
                <doc-sources path-element="../system_events/src/system/events" />
                <doc-sources path-element="../system_formatters/src/system/formatters" />
                <doc-sources path-element="../system_hosts/src/system/hosts" />
                <doc-sources path-element="../system_ioc/src/system/ioc" />
                <doc-sources path-element="../system_logging/src/system/logging" />
                <doc-sources path-element="../system_logic/src/system/logic" />
                <doc-sources path-element="../system_models/src/system/models" />
                <doc-sources path-element="../system_network/src/system/network" />
                <doc-sources path-element="../system_numeric/src/system/numeric" />
                <doc-sources path-element="../system_process/src/system/process" />
                <doc-sources path-element="../system_reflection/src/system/reflection" />
                <doc-sources path-element="../system_remoting/src/system/remoting" />
                <doc-sources path-element="../system_rules/src/system/rules" />
                <doc-sources path-element="../system_signals/src/system/signals" />
                <doc-sources path-element="../system_terminals/src/system/terminals" />
                <doc-sources path-element="../system_text/src/system/text" />
                <doc-sources path-element="../graphics/src/graphics" />

                <!-- SPECIAL CASE -->
                <doc-sources path-element="../../libraries/logd/src/core/_logger.as" />
                <doc-sources path-element="../../libraries/logd/src/core/assert.as" />
                <doc-sources path-element="../../libraries/logd/src/core/log.as" />
                <doc-sources path-element="../../libraries/logd/src/core/Logger.as" />

                <!-- SPECIAL CASE -->
                <doc-sources path-element="../../libraries/eden/src/library/eden" />

                <doc-sources path-element="../../libraries/astuce/src/library/ASTUce" />

                <doc-sources path-element="../../libraries/ax/src/air" />
                <doc-sources path-element="../../libraries/fx/src/flash" />
                <doc-sources path-element="../../libraries/molecule/src/molecule" />
                
                <external-library-path dir="../../libraries/molecule/lib-swc/" append="true">
                    <include name="starling.swc"/>
                </external-library-path>
            </asdoc>

            <sequential if:true="${build.fatswc}">
                
                <!-- update swc with asdoc xml -->
                <zip destfile="${basedir}/${release.dir}/${project.swc-SA}" update="true">
                    <zipfileset dir="${basedir}/${asdoc.output}/tempdita" prefix="docs">
                        <include name="*.xml" />
                        <include name="*.dita" />
                        <exclude name="ASDoc_Config.xml" />
                        <exclude name="overviews.xml" />
                    </zipfileset>
                </zip>

            </sequential>

            <delete dir="${basedir}/${asdoc.output}/tempdita" />

        </sequential>

    </target>

    <target name="build-zip">

        <sequential unless:true="${build.nozip}">

            <!-- generate documentation.zip -->
            <zip destfile="${basedir}/${release.dir}/documentation.zip"
                 basedir="${basedir}/${asdoc.output}"
                 unless:true="${build.nodoc}" />

            <!-- copy all files to deploy dir -->
            <copy todir="${basedir}/${deploy.dir}">
                <fileset dir="${basedir}">
                    <include name="*.txt" />
                    <include name="*.md" />
                </fileset>
                <fileset dir="${basedir}/${release.dir}">
                    <include name="*.swc" />
                    <include name="*.abc" />
                </fileset>
                <file file="${basedir}/${release.dir}/documentation.zip" unless:true="${build.nodoc}" />
            </copy>

            <!-- zip all files -->
            <zip destfile="${basedir}/${deploy.dir}/${project.name}-${project.version}.zip"
                 basedir="${basedir}/${deploy.dir}" />

            <!-- delete all files except the zip -->
            <delete includeemptydirs="true">
                <fileset dir="${basedir}/${deploy.dir}">
                    <include name="**/*"/>
                    <exclude name="${project.name}-${project.version}.zip"/>
                </fileset>
            </delete>

        </sequential>

    </target>

    <target name="after">
        
    </target>
    
</project>