<?xml version="1.0" encoding="UTF-8"?>

<project name="maashaack-metabuild" default="main" basedir=".">

    <!--
    Documentation
    A metabuild is simply an Ant build that drives other ant builds

    some features
    - can build numerous projects at the same time
    - can build projects in a predefined order
    - can copy dependencies from one project to another project
    - can identify the global build under one unique tag
    
     -->

    <!-- All Tasks -->
    <import file="build/tasks/define-pre-tasks.xml" />
    <import file="build/tasks/define-post-tasks.xml" />
    <import file="build/tasks/verify-dependencies.xml" />
    
    <!-- All Macros -->
    <import file="build/macros/svn-update.xml" />
    <import file="build/macros/svn-add.xml" />
    <import file="build/macros/svn-commit.xml" />

    <import file="build/macros/libs-create-tag.xml" />


    <target name="clean">
        
    </target>

    <target name="define-constants">
        
        <available file="build/user.properties" type="file" property="found.userprops" />
        
        <if>
            <equals arg1="${found.userprops}" arg2="true"/>
        <then>
            <property file="build/user.properties"/>
        </then>
        <else>
            <property file="build/common.properties"/>
        </else>
        </if>

        <if>
            <equals arg1="${build.documentation}" arg2="false"/>
        <then>
            <property name="build.nodocumentation" value="true"/>
        </then>
        <else>
            <property name="build.nodocumentation" value="false"/>
        </else>
        </if>

        <!-- FLEX_HOME -->
        <condition property="FLEX_HOME" value="${FLEX_HOME_MAC}">
            <os family="mac"/>
        </condition>        
        <condition property="FLEX_HOME" value="${FLEX_HOME_WIN}">
            <os family="windows" />
        </condition>
        <echo message="FLEX_HOME defined" />

        <!-- SHELL -->
        <condition property="SHELL" value="${SHELL_MAC}">
            <os family="mac"/>
        </condition>
        <condition property="SHELL" value="${SHELL_WIN}">
            <os family="windows" />
        </condition>
        <echo message="SHELL defined" />
        
    </target>
    
    <target name="before" depends="task-define-pre-tasks,define-constants,task-define-post-tasks">

        <!-- timestamp of the metabuild -->
        <tstamp>
            <format property="TODAY" pattern="dd MMMM yyyy" />
        </tstamp>
        
        <available file="${FLEX_HOME}" type="dir" property="local.found.flex" />
        
    </target>

    <target name="check" depends="task-verify-dependencies" />


    <target name="tag">
        
        <if>
            <equals arg1="${build.publish}" arg2="true"/>
        <then>
            <svn-update path="${basedir}/build" />
        </then>
        </if>
        
        <property file="build/version.properties" prefix="previous." />
        
        <if>
            <equals arg1="${previous.version.build}" arg2="999" />
        <then>
            <propertyfile file="build/version.properties">
                <entry key="version.build" type="int" value="0"/>
            </propertyfile>
            <script language="javascript">
            numeric = Number( project.getProperty("previous.version.serie") );
            letter  = String( project.getProperty("previous.version.cycle") );
            if( letter == "Z" )
            {
                letter = "A";
                numeric++;
            }
            else
            {
                letter = String.fromCharCode( letter.charCodeAt(0)+1 );
            }
            project.setNewProperty("current.serie", numeric);
            project.setNewProperty("current.cycle", letter);
            </script>
            <propertyfile file="build/version.properties">
                <entry key="version.serie" type="int" value="${current.serie}"/>
                <entry key="version.cycle" type="string" value="${current.cycle}"/>
            </propertyfile>
        </then>
        <else>
            <propertyfile file="build/version.properties">
                <entry key="version.build" type="int" operation="+" default="0" pattern="000"/>
            </propertyfile>
        </else>
        </if>

        <!-- remove comments -->
        <replaceregexp file="build/version.properties" match="#.*" replace="" />
        <!-- remove blank lines -->
        <replaceregexp file="build/version.properties" match="(\r?\n)\s*\r?\n" flags="g" replace="\1" />
        
        <property file="build/version.properties" prefix="MetaBuild." />
        <property name="MetaBuild.version.tag" value="${MetaBuild.version.serie}${MetaBuild.version.cycle}${MetaBuild.version.build}" />
        <property name="MetaBuild.message" value="MetaBuild tag ${MetaBuild.version.tag}"/>
        
        
        <if>
            <equals arg1="${build.publish}" arg2="true"/>
        <then>
            <svn-commit path="${basedir}/build/version.properties" message="MetaBuild ${MetaBuild.version.tag} - update version properties"/>
        </then>
        </if>
    </target>

    <!-- Main Entry Point -->
    <target name="main" depends="clean,before,check,tag,compile,after" />
    
    <target name="after">
        <!-- metabuild flag :) -->
        <echo>
           _____           __         __________      .__.__       .___
          /     \   ____ _/  |______  \______   \__ __|__|  |    __| _/
         /  \ /  \_/ __ \\   __\__  \  |    |  _/  |  \  |  |   / __ | 
        /    Y    \  ___/ |  |  / __ \_|    |   \  |  /  |  |__/ /_/ | 
        \____|__  /\___  >|__| (____  /|______  /____/|__|____/\____ | 
                \/     \/           \/        \/                    \/ 
        </echo>
    </target>

    <target name="compile">
        <echo message="MetaBuild tag [${MetaBuild.version.tag}]"/>
        <if>
            <equals arg1="${build.showoptions}" arg2="true"/>
        <then>
            <echo message="options:"/>
            <echo message="  publish             = ${build.publish}"/>
            <echo message="  documentation       = ${build.documentation}"/>
            <echo message="  update dependencies = ${build.updatedependencies}"/>
            <echo message="  update libs         = ${build.updatelibs}"/>
            <echo message="  Flex SDK            = ${FLEX_HOME}"/>
            <echo message="  Flash Player        = ${local.flashplayerversion}" />
            <echo message=""/>
        </then>
        </if>
        <echo message="${build.separator}"/>

        <!-- load all the modules -->
        <property file="build/compile.properties" prefix="module" />
        <propertyselector property="compile.list"
                          delimiter=","
                          match="module\.([^\.]*)\.name"
                          select="\0"
                          casesensitive="true" />
        
        <!-- sorts module by order they appear in the file -->
        <sortlist property="compile.sorted"
                  value="${compile.list}"
                  delimiter=","
                  orderPropertyFile="build/compile.properties"
                  orderPropertyFilePrefix="module" />

        <!-- loop into all the modules -->
        <for list="${compile.sorted}" param="project.id">
            <sequential>
                <propertycopy name="project.name" from="@{project.id}" override="true" />
                <propertycopy name="project.path" from="module.${project.name}.path" override="true" />
                <propertycopy name="project.mod" from="module.${project.name}.mod" override="true" />
                <propertycopy name="project.alt" from="module.${project.name}.alt" override="true" />
                <var name="project.fullpath" value="${project.path}/${project.mod}"/>
                <!--
                <echo message="project.id = @{project.id}"/>
                <echo message="project.name = ${project.name}"/>
                <echo message="project.path = ${project.path}"/>
                <echo message="project.mod = ${project.mod}"/>
                <echo message="project.alt = ${project.alt}"/>
                <echo message="project.fullpath = ${project.fullpath}"/>
                 -->
                <echo message="Compile module [${project.mod}] in [${project.path}]" />
                
                <!-- call module build -->
                <if>
                    <equals arg1="${project.alt}" arg2=""/>
                <then>
                    <ant antfile="build/modules/${project.mod}.xml" target="compile-${project.mod}" inheritAll="true" />
                </then>
                <else>
                    <ant antfile="build/modules/${project.alt}.xml" target="compile-${project.alt}" inheritAll="true" />
                </else>
                </if>
                
                <!-- update the lib-swc folder -->
                <if>
                    <and>
                        <equals arg1="${build.publish}" arg2="true"/>
                        <equals arg1="${build.updatedependencies}" arg2="true"/>
                        <available file="${project.fullpath}/lib-swc" type="dir"/>
                    </and>
                <then>
                    <svn-commit path="${basedir}/${project.fullpath}/lib-swc" message="MetaBuild ${MetaBuild.version.tag} - ${project.name} update SWC dependencies"/>
                    <echo message="${project.name} update SWC dependencies in /lib-swc"/>
                </then>
                </if>

                <!-- update the lib-abc folder -->
                <if>
                    <and>
                        <equals arg1="${build.publish}" arg2="true"/>
                        <equals arg1="${build.updatedependencies}" arg2="true"/>
                        <available file="${project.fullpath}/lib-abc" type="dir"/>
                    </and>
                <then>
                    <svn-commit path="${basedir}/${project.fullpath}/lib-abc" message="MetaBuild ${MetaBuild.version.tag} - ${project.name} update ABC dependencies"/>
                    <echo message="${project.name} update ABC dependencies in /lib-abc"/>
                </then>
                </if>
                
                <echo message="${build.separator}"/>
            </sequential>
        </for>

        <if>
            <and>
                <equals arg1="${build.publish}" arg2="true"/>
                <equals arg1="${build.updatelibs}" arg2="true"/>
            </and>
        <then>
            <svn-add path="${basedir}/libs/swc/" force="true"/>
            <svn-add path="${basedir}/libs/abc/" force="true"/>
            <svn-add path="${basedir}/libs/exe/" force="true"/>
            <svn-commit path="${basedir}/libs" message="MetaBuild ${MetaBuild.version.tag} - update current libs"/>
            <libs-create-tag tag="${MetaBuild.version.tag}" message="MetaBuild ${MetaBuild.version.tag} - tag maashaack libs [${MetaBuild.version.tag}]"/>
        </then>
        </if>
        
    </target>
    
</project>

