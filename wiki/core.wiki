#summary core package.

= About =

*core* is specialized in classes and functions utilities that are highly reusable without creating any dependencies.

<a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/"><img alt="Licence Creative Commons" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/2.0/uk/88x31.png" /></a>

<g:plusone size="medium"></g:plusone>

|| *package* || *FPAPI* || *CC* || *dependencies* || *cross-platform* || *redtamarin* ||
|| `core.*` || FP_10_2|| n/a || n/a || yes || 0.3.1 ||

|| *browse* || [http://code.google.com/p/maashaack/source/browse/#svn%2Fpackages%2Fcore%2Ftrunk /packages/core/trunk] ||
|| *checkout* || `svn checkout http://maashaack.googlecode.com/svn/packages/core/trunk core-read-only` ||

<a href="http://maashaack.googlecode.com/svn/libs/trunk/swc/packages/core.swc"><img src="http://maashaack.googlecode.com/svn/gfx/swc.png" align="left"/></a>
<a href="http://maashaack.googlecode.com/svn/libs/trunk/abc/packages/core.abc"><img src="http://maashaack.googlecode.com/svn/gfx/abc.png" align="left"/></a>


<br>
<br>
<br>
<br>

= Introduction =

The *core* package organize an aggregation of classes and functions
in sub-packages.

{{{
core
  |_ arrays
  |_ chars
  |_ data
  |_ functors
  |_ hash
  |_ html
  |_ maths
  |_ objects
  |_ reflect
  |_ strings
  |_ vectors
}}}

TODO



= Details =

You can consider a library as a set of functions organized into classes,<br>
here with a "core" library in some cases we organize the functions<br>
in the package definitions without assembling them into a class.

ideally you would want to write it like that
{{{
package core
{
    public function test( message:String ):void
    {
        trace( message );
    }
}
}}}

but there is a subtle bug in Flash CS3 that would prevent users to use<br>
a function declared at the package level from a SWC, so instead of a declaring<br>
a function, we declare a variable of the type `Function`.

{{{
package core
{
    public var test:Function = function( message:String ):void
    {
        trace( message );
    }
}
}}}

but wait, we want speeeeeed so we make that a constant
{{{
package core
{
    public const test:Function = function( message:String ):void
    {
        trace( message );
    }
}
}}}

We'll try to come up with speed comparison, but here what we assume
 * a package-level function is slightly faster than a static function call
 * a function marked as final is faster (avoid the compiler to do runtimes lookup)
 * a package-level constant should be as fast or even faster than a package-level function


Also in most of the code editors (even Flex Builder), when you make a reference to<br>
a variable declared at the package level, the `import` can be cleaned up<br>
here a way to force the import to stay, use `void(function)`
{{{
package
{
    import core.strings.format; void(format);
    
    import flash.display.Sprite;
    
    public class Main extends Sprite
    {
        //...
    }
}
}}}
(this seems fixed in Flash Builder 4/4.5)

Those functions are allowed to reuse the builtin types (Object, Array, etc.),<br>
the Flash API classes and packages, but nothing else.

Here some basic rules:
 * nothing declared in the unnamed package (eg. `package { ... }`)
 * all functions or classes start with a lowercase letter (use `bit`, not `Bit`)
 * try to reuse similar name for similar functionality (`core.strings.compare` and `core.arrays.compare`)
 * you can not reuse another function or class from any other maashaack package, even from core itself
 * you can not reuse a third party library at all
 * no use of interfaces, enums, events, namespaces, etc.
 * everything have to be "inlined code"
 * the code have to be written for speed and less use of memory
 * it have to work everywhere (redtamarin included)

You really have to see what's in *core* as building blocks to build bigger classes.

Why we impose all those rules ?
 * even if you include *core.swc* in your libraries<br>the final bytecode injected in your final swf will be minimal
 * core will not create strong dependencies of any sort in your code
 * at the very worst, you can extract the code of a function and inline it directly in your code


TODO


----
= Documentation =


----

= Usages =